{"version":3,"sources":["Main.tsx","About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Title","Typography","Main","useState","img","setImg","onPaste","useCallback","images","length","ImagePreview","useMemo","src","style","margin","backgroundColor","padding","onError","console","error","container","window","About","Header","Layout","Footer","Content","Logo","styled","div","App","theme","mode","defaultSelectedKeys","lineHeight","Item","key","to","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAIOA,EAASC,IAATD,MAEME,EAAW,WAAO,IAAD,EACJC,mBAAc,MADV,mBACnBC,EADmB,KACdC,EADc,KAEpBC,EAAUC,uBAAY,YAAe,IAAbC,EAAY,EAAZA,OAC1BH,EAAOG,EAAOA,EAAOC,OAAS,MAC/B,CAACJ,IACEK,EAAeC,mBAAQ,WACzB,OAAKP,EACO,yBAAKQ,IAAKR,IADL,gCAElB,CAACA,IACJ,OACI,yBAAKS,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,OAAQC,QAAS,KACvD,kBAAChB,EAAD,iBACA,kBAAC,IAAD,MACA,kBAAC,UAAD,CAASiB,QAASC,QAAQC,MAAOC,UAAWC,OACnCf,QAASA,IAEjBI,I,SCnBNV,EAASC,IAATD,MAEMsB,EAAa,WACtB,OACI,yBAAKT,MAAO,CAACC,OAAQ,GAAIC,gBAAiB,OAAQC,QAAS,KACvD,kBAAC,EAAD,gB,4ICDLO,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,OAAQC,EAAWF,IAAXE,QAEjBC,EAAOC,IAAOC,IAAV,KAyCKC,EAnCH,WACR,OACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAACP,EAAD,KACI,kBAACI,EAAD,iBACA,kBAAC,IAAD,CAAMI,MAAM,OAAOC,KAAK,aAAaC,oBAAqB,CAAC,KAAMpB,MAAO,CAACqB,WAAY,SACjF,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KACX,kBAAC,IAAD,CAAMC,GAAG,KAAT,WAIJ,kBAAC,IAAKF,KAAN,CAAWC,IAAI,KACX,kBAAC,IAAD,CAAMC,GAAG,UAAT,yBAMZ,kBAACX,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOY,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,SAIZ,kBAACb,EAAD,SChCIc,QACW,cAA7BlB,OAAOmB,SAASC,UAEe,UAA7BpB,OAAOmB,SAASC,UAEhBpB,OAAOmB,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.82e7b2ed.chunk.js","sourcesContent":["import React, {FC, useCallback, useMemo, useState} from \"react\";\nimport {Divider, Typography} from 'antd';\nimport {Gluejar} from \"@charliewilco/gluejar\";\n\nconst {Title} = Typography;\n\nexport const Main: FC = () => {\n    const [img, setImg] = useState<any>(null);\n    const onPaste = useCallback(({images}) => {\n        setImg(images[images.length - 1]);\n    }, [setImg]);\n    const ImagePreview = useMemo(() => {\n        if (!img) return <img/>;\n        else return <img src={img}/>;\n    }, [img]);\n    return (\n        <div style={{margin: 20, backgroundColor: '#fff', padding: 20}}>\n            <Title>Deep LoL</Title>\n            <Divider/>\n            <Gluejar onError={console.error} container={window as any}\n                     onPaste={onPaste}\n            />\n            {ImagePreview}\n        </div>\n    )\n};","import React, {FC} from \"react\";\nimport {Typography} from 'antd';\n\nconst {Title} = Typography;\n\nexport const About : FC = () => {\n    return (\n        <div style={{margin: 20, backgroundColor: '#fff', padding: 20}}>\n            <Title>About</Title>\n        </div>\n    )\n};","import React from 'react';\nimport {BrowserRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Layout, Menu} from \"antd\";\nimport {Main} from \"./Main\";\nimport styled from 'styled-components';\nimport {About} from \"./About\";\n\nconst {Header, Footer, Content} = Layout;\n\nconst Logo = styled.div`\n    display: inline-block;\n    float: left;\n    color: white;\n`;\n\nconst App = () => {\n    return (\n        <Router>\n            <Layout>\n                <Header>\n                    <Logo>Deep LoL</Logo>\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']} style={{lineHeight: '64px'}}>\n                        <Menu.Item key=\"1\">\n                            <Link to=\"/\">\n                                홈\n                            </Link>\n                        </Menu.Item>\n                        <Menu.Item key=\"2\">\n                            <Link to=\"/about\">\n                                만든이\n                            </Link>\n                        </Menu.Item>\n                    </Menu>\n                </Header>\n                <Content>\n                    <Switch>\n                        <Route path=\"/about\">\n                            <About/>\n                        </Route>\n                        <Route path=\"/\">\n                            <Main/>\n                        </Route>\n                    </Switch>\n                </Content>\n                <Footer></Footer>\n            </Layout>\n        </Router>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}